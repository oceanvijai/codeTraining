What are the differences between Mutex vs Semaphore? When to use mutex and when to use semaphore?

The producer-consumer problem:
------------------------------
Consider the standard producer-consumer problem. Assume, we have a buffer of 4096 byte length. 
A producer thread collects the data and writes it to the buffer. A consumer thread processes the 
collected data from the buffer. Objective is, both the threads should not run at the same time.


Using Mutex:
------------
A mutex provides mutual exclusion, either producer or consumer can have the key (mutex) and 
proceed with their work. As long as the buffer is filled by producer, the consumer needs to wait, 
and vice versa.

At any point of time, only one thread can work with the entire buffer. The concept can be generalized 
using semaphore.


Using Semaphore:
----------------
A semaphore is a generalized mutex. In lieu of single buffer, we can split the 4 KB buffer into four 1 KB 
buffers (identical resources). A semaphore can be associated with these four buffers. The consumer and producer 
can work on different buffers at the same time.


Misconception:
--------------
There is an ambiguity between binary semaphore and mutex. We might have come across that a mutex is binary semaphore.
 But they are not! The purpose of mutex and semaphore are different. May be, due to similarity in their implementation
  a mutex would be referred as binary semaphore.

Strictly speaking, a mutex is locking mechanism used to synchronize access to a resource. 
Only one task (can be a thread or process based on OS abstraction) can acquire the mutex. 
It means there is ownership associated with mutex, and only the owner can release the lock (mutex).

Semaphore is signaling mechanism (“I am done, you can carry on” kind of signal). For example, 
if you are listening songs (assume it as one task) on your mobile and at the same time your friend 
calls you, an interrupt is triggered upon which an interrupt service routine (ISR) signals the call 
processing task to wakeup.

Ref:

http://www.geeksforgeeks.org/mutex-vs-semaphore/
https://barrgroup.com/Embedded-Systems/How-To/RTOS-Mutex-Semaphore
https://barrgroup.com/Embedded-Systems/How-To/RTOS-Priority-Inversion