For availability & fault tolerance we need to duplicate data

The challenge is to keep the replicas consistent

consistent - The client should feel as if there is only one copy of the data

Safty properties:
-----------------
Read you write consistency - The client must be always able to read what it wrote
  - Wrote to a replica and read from another replica which is not yet updated
  - How to achieve ?

FIFO consistence - Writes mush ensure first out first written
  - 2 writes to a replicae which were applied OUT OF ORDER in another replica will create mismatch in data between replicas
  - How to achieve ?
  
casual consistency - Writes with a causing order are seen by all process in the same order
  - Read bank balance from one replica(Which has +ve balance) and tried to withraw from another outdate of data replica can cause casual order violation.
  - Happens before relations between writes must not be violated
  - Since the write has casually happened before a read
  - This consitency is good enough most of the time
  - How to achieve ? Lamport clocks & vector clocks  

Strong consistent - Where all copies are updated before commiting
  - Primary - backup model provides stong consistency 







Liveness properties:
--------------------
Eventual consistency - Where the replicas will eventually get consistent




  
  
Active & passive replication

Active - Where each replicas EXECUTE the changes individually and apply it to their copy
  - Also called state machine replication
  - useful when
    - If the state update is large which is very big to send it accros, in that case better compute it quickly on each replicas
Passive - Where only primary EXECUTE the changes and asks the replicas to just update their copies with new value
  - Useful when
    - When the computation is too expensive so you can compute it once and share it with others
    - If the execution involves generating random number, then better use passive
    
    
Merkel trees (Hash trees):
  - When the data to be replicated is large and to save bandwith, we use merkel tree to identity only a small portion of data 
    which needs to transfered.
  - The leaf nodes are values. Its parents is the hash of its children and so is its parents. Finally we use compare hash tree to find out the point of difference.
  - We can use this like a check sum and in cryptography
    - https://youtu.be/9KX2wvAgVSo?t=2477
    - http://decomposition.al/blog/2019/05/31/how-i-learned-about-merklix-trees-without-having-to-become-a-cryptocurrency-enthusiast/ (optional)
   
