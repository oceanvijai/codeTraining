https://github.com/donnemartin/system-design-primer

Dont use Data structure or algorithms yet

----------------------------------------------------------------------------
Step 1: Requirements

1. What core problem is the system solving
    - list all the things the system needs to do
    - narrow down the most important things

2. Who are its users
    - How/where does the sysem gets the input
        - geo consideration
        - Eg: live video conference is internationaly distributed
        - Eg: booking ola cab is locally and regionally distributed
    - Who/how the data is accessed
        - geo consideration
        - where data is it created
        - where data is accessed

Write down an simple API contract 

3. Perforamance, concurency and Consistency

    - performance
        - How fast does the needs data needs to be collected and stored
            - How mush data is collected per second
            - use analystics/monitoring to find the input pattern
        - How fast is the data needs to be retrived
             - use analystics/monitoring to find the access patterns
             - use analystics/monitoring to find the per transaction patterns
    - concurency
        - What is concurency of the data injested
        - What is concurency of the data accessed
    - Consistency
        - What is consistency requirements of the system

----------------------------------------------------------------------------
Step 2: Solve it

Solve it assuming all the data is in one machine
HIGH LEVEL DESIGN
----------------------------------------------------------------------------
Step 3: split it and scall along

Then start splitting up the data and load
1. Decide and design the data base and how we store it - Scalable in nature
1. Figure out the 
    - tire 0 (synchronous realtime like UI) and 
    - tire 1 (async realtime like OTP) systems
2. Figure out the rest of the systems
    - preprossing systems - Eg: crawler for search system to create indexes
    - processing systems - Eg: Order management service in e-commerce
    - post processing systems - Eg: Validation, Reporting, notfication, bussiness alerting 
    - failover systems
    
    - Bash systems 
    - message queues
    - scheduling sysems
    - telemetry systems
3. Figure out the geo infact
    - Does the input pattern local or international
    - Does the access pattern local or international
----------------------------------------------------------------------------
Step 4: Validate it

1.  Identity the most important bottlenecks and fix it
2.  Optimize every decesion taken so far
3.  Apply the scalability patterns
4.  Point out tools of the trade for each steps

Do the bit/byte calculation for the estimate
The total load
Calculate the processing power
The total storage
----------------------------------------------------------------------------
Step 5: Design and add scalable components

Draw the overall components with a standard design
Fix your design to address the bottlenecks
Fix Consistency, availability and partition problems

----------------------------------------------------------------------------
