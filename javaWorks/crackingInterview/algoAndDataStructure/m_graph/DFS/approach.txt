DFS: O(v+E) - v - vertices, E - edges
https://www.youtube.com/watch?v=AfSk24UTFS8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=14
https://youtu.be/S23W6eTcqdY?list=PLOtl7M3yp-DV69F32zdK7YJcNXpTunF2b

Properties:
    - Find cycles in a graph
    - It can produce the tree edges, forward edges, back edges and cross edges
            Tree edges:
                which we can find in the parent map in during DFS
            Forward edge:
                Which has a edge which is its successor already
            back edge
                Which has a edge to its ancesstor - cycle edge - can be foudn by the visited or parent relation
            cross edge
                Which is connecting two graph ???
    - Topological sort in a directed graph
    - Articulation vertices - a vertex when deleted will make the graph diconnected

Applications:
    - Job scheduling using Topological sort
    - build machine etc


Topological:
    - All directed acyclic graph has a Topological sort
    - Once sorted we can see the first node in the sort will have indegree zero

 Articulation vertices:
    - Suppose you want to disconnect the graph how would you do it ?
    - So try deleting one edge and do DFS - O(V(V+E))
    - The better way is as folows,  
      If you take any graph and visualize it, any edge which does not touched (backed up) by a 
      cycle/back edge , if removed will disconnect the graph.
      i.e a tree edge which does not have a back edge when deleted will disconnect the graph

------------------------------------------------------------------------------------------------------------
OPTIONAL:

Disjoint set:
    - We can find cycle using disjoint set as well
    - the steps are as folows
        1.  now take an array called parent array and fill it with -1
        2.  take an edge every edge and perform 2 operation FIND and UNION
        3.  FIND: find the parents of the two vertex of the current edge
        4.  If both the parents are same, then there is a cycle
        5.  UNION: Now there is not cycle, update the parent of v1 as parent of v2 (it does nt matter whom we set a parent)
    - https://www.youtube.com/watch?v=wU6udHRIkcc
    - https://www.geeksforgeeks.org/union-find/
    - Now finding the parent is O(n)
    - Now can improve this by Rank and path compression

RANK and PATH COMPRESSION
        1.  Now, lets say we make 1 as the parent of 2, then we out 1 as parent of 2 and for 1 we put -2 
            instead of leaving it as -1.
        2.  There by we are calculating the RANK of 1 , the number of edges connected to 1
        3.  Then, when we find there is not cycle and perform UNION, we do the PATH COMPRESSION
        4.  When we UNION two set, we take the set with the max -ve value as the parent and add lest parent RANK 
            to the new parent RANK and directly mark it as the parent
        5.  This way we need not do O(n) when we search for parent, we ony do O(1)
    - https://www.geeksforgeeks.org/union-find-algorithm-set-2-union-by-rank/

