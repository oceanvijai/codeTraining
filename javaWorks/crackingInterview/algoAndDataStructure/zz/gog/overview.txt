

String manipulation problems are in the same category as array, because string is 
represented as an array of characters internally. Array problems usually does not 
require knowledge of advanced data structures, so just basic data structures such as 
Hash Table and basic techniques like Two Pointers should suffice.

Google likes to test your ability to think at large scale by asking variation of 
problems represented in data stream model. For example, instead of giving you an 
integer array, you are given a stream of integers and all integers are too large to be fit in memory. 

A great example of such problem which can be represented in data stream model is Longest 
Substring with At Most K Distinct Characters.

https://en.wikipedia.org/wiki/Streaming_algorithm#Data_stream_model

https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/



Linked list:


According to our survey data by users, Linked List problems are not asked frequently at Google. Perhaps most linked list problems are not that complex and is harder to ask follow up questions and complexity analysis is usually pretty straightforward.

Nonetheless, we strongly recommend you to still practice classic Linked List interview questions such as: Linked List Cycle, Intersection of Two Linked Lists and Copy List with Random Pointers. These problems are really fun problems and they teach you how to think outside of the box.

Of course, Merge k Sorted Lists is one of our all-time favorite interview questions and Google seems to love this question as well. Make sure you understand how to analyze the time complexity! This is a must-asked follow up question for this problem.


Tree:

Tree is just a special case of graph. To understand the difference between trees and graphs, you can work on Graph Valid Tree.

Graphs are generally search breath first or depth first. The same applies to Tree.

Graphs are generally more complex than trees. Similarly, trees are generally more complex than a linear data structure such as array or linked list.

Prepping for your knowledge in Graphs is essential for Google interviews as you would most likely encounter a tree or graph question. A great way to brush up is to implement a tree or graph by coding it from scratch in Playground.




Recursion:


Recursion usually involve some kind of backtracking to enumerate all possibilities.

Note that Backtracking is a more general purpose algorithm. Depth-First search is a specific form of backtracking related to searching tree structures. Therefore we categorize those problems in "Trees and Graphs", even though they involve recursion.

There are usually some smart pruning techniques which optimizes backtracking. For a great introduction of how pruning works, take a look at this article. A great example is "Word Search II" (aka the Boggle solver), which uses a data structure to optimize the search.


https://secweb.cs.odu.edu/~zeil/cs361/web/website/Lectures/styles/pages/ar01s04s05.html


Sorting and searching:


Interval related problems are quite often asked at Google interviews.

Similar to "Array and Strings", interval related problems can be asked in the context of data stream. Some good examples are: My Calendar I, My Calendar II, Find Median from Data Stream, and Sliding Window Median.




Dynamic Programming
It can be tricky to identify the subproblems and connecting them, which is essential in solving Dynamic Programming problems. Dynamic programming is not that scary as you might think, and you can improve your dynamic programming skills greatly by practicing a lot of these problems.

According to our user survey, some of the most frequently asked Dynamic Programming Google interview questions include: Sentence Screen Fitting, Bomb Enemy, and Paint Fence.




Google loves to ask lots of question variations based on the Iterator pattern, so make sure you are familiar with the concept of iterators and how iterator works in principle. A good way to learn is to read open source code and try to code it yourself. For example, here is Google's guava implementation of Peeking Iterator.