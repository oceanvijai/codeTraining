public class TargetSum{
  /**
    You are given an integer array nums and an integer target.

    You want to build an expression out of nums by adding one of the symbols '+' and '-' before each 
    integer in nums and then concatenate all the integers.

    For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
    Return the number of different expressions that you can build, which evaluates to target.
    
    Example 1:
    Input: nums = [1,1,1,1,1], target = 3
    Output: 5
    Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
      -1 + 1 + 1 + 1 + 1 = 3
      +1 - 1 + 1 + 1 + 1 = 3
      +1 + 1 - 1 + 1 + 1 = 3
      +1 + 1 + 1 - 1 + 1 = 3
      +1 + 1 + 1 + 1 - 1 = 3
    
    Example 2:
    Input: nums = [1], target = 1
    Output: 1
  
  **/
  
    /**
      Since this is an optimisation problem, we can DP it.
      Lets count the posibilites if its -ve & +ve
    
    
    **/
    
    
    
    public int findTargetSumWays(int[] nums, int target) {
        // Total the inputs so we wont go beyong the double of its sum
        int total = Arrays.stream(nums).sum();
        
        // DP with rows as number of inputs and columns as (total * 2)
        // Try this in paper and we will know why
        // Like we may get a total when we put -sign for the input which is higher than target
        int[][] dp = new int[nums.length+1][(total*2)+1];
        dp[0][0] = 1;

        for(int i = 1; i <= nums.length; i++){
            // We just need to go till the actual total
            for(int j = 0; j < total+1; j++){
                dp[i][j] = dp[i-1][Math.abs(j-nums[i-1])] // If we decide the num is +ve
                            + dp[i-1][Math.abs(-j-nums[i-1])]; // If we decide the num is -ve
            }
        }

        return dp[nums.length][Math.abs(target)];
    }
  
  
}
