Creations:
----------

byte -> 8bit -> -128 to 127
short -> 16bit -> -32,768 to 32,767 

Integer.MIN_VALUE = -2_147_483_648, -2^32 
Integer.MAX_VALUE = 2_147_483_647 (2 billion, 200cr)

long -> -2^63 - 2^63-1

scientific notation for 
3e2 = 300.0 (3*10^2)
3.1e2 = 310.0
3.1e-1 = 0.31

hexa decimal (prefix '0x')
0xf = 15
 
Conversions:
----------
int to char -> 
char to int -> Character.getNumericValue('2'); or '0'-'2'

Integer to String -> String.valueOf(123);
String to Integer  -> Integer.parseInt("123");

Long to integer -> Math.toIntExact or myLong.intValue();


Collections:
----------
int[] arr = new int[]{1,2,3};
char[] c = new char[]{'a','b'};

// Fills only primitive arrays
Arrays.fill(nums, -1);
Arrays.fill(empArray, new Emp());

// Create an immutable list of 5 zeros
List<Integer> defaultIntList = Collections.nCopies(5, 0);
System.out.println(defaultIntList); // Output: [0, 0, 0, 0, 0]

// Create an immutable list of 3 empty strings
List<String> defaultStringList = Collections.nCopies(3, "");
System.out.println(defaultStringList); // Output: [, , ]


// returns the 
Arrays.binarySearch(nums, key)

// Print primitive arrays
System.out.println(Arrays.toString(nums));

Sorting:
----------
// Allows only primitive arrays like int[], long[], Object[] and also only in ascending order
// Try not to use it since we cant do reverse order
Arrays.sort(nums); 

// to do reverse order we need
 nums = Arrays
          .stream(nums)
          .boxed()
          .sorted((a,b) -> b - a)
          .mapToInt(Integer::intValue)
          .toArray();

// Priority queue
PriorityQueue<Integer> queue = new PriorityQueue<>((a,b) -> a - b);
queue.offer(6); // push
queue.poll(); // remove the head
queue.peek(); // view the head

// Tree Map
TreeMap<Integer, Integer> map = new TreeMap<>((a, b) -> b - a);
map.put(5,2);
map.put(7,1);
map.put(1,3);
map.put(10,1);

map.pollFirstEntry(); // Remove the min/max entry from the map
map.pollLastEntry(); // Remove the min/max entry from the map

map.ceilingKey(6); // Get a key which is to the upper side/equal of the input key
map.floorKey(6); // Get a key which is to the lower/equal side of the input key



Math:
----------

abs(-34.5)
ceil(2.17)
floor(3.14)
min(x, -4), max(3 . 14, y)
pow(2.71, 3 . 14)
sqrt(225)


loops:
----------


Random:
----------

nextlnt(16)
nextlnt() 
nextBoolean() 
nextDouble() (which returns a value in [0, 1))

Bits:
-----

To count the number of set bit in an integer:
Integer.bitCount(i);

Java integer to binary
Integer.toBinaryString(l)

Java binary to integer
Integer.parseInt("1010",2) // But will be in trimmed format

