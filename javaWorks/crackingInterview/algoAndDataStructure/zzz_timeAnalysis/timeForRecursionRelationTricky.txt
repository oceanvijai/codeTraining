Always try to have one recurrence relation before starting the induction. 
If you have two recurrence relation in your solution, then recude it to one by either
1. approx, for example T(n-2) can be approximted to T(n-1) since T(n-1) will always be greater than T(n-2)
2. Try t(n-2) and see if those are getting recuded by putting them in the first equation



WE need recusions sample for 

int f = (int n) => {
  if (n === 1) {
    return 1;
  }

  for (let i = 0; i < n; i++) {
    console.log(i);
  }

  return f(n-1) + f(n-1)
}

--------------------------------------------------------------------------------
O(n)


if (n === 1) {
  return 1;
}
sout("print something");
return f(n-1);

recurence relation, T(n) = T(n-1)+1, T(0) = 1

Apply induction, 
T(n) = T(n-k) + k
 n - k = 0
 n = k, so the relation becomes
T(n) = T(0) + n
     = 1 + n

So O(n)


--------------------------------------------------------------------------------
O(nlogn)


  if (n === 1) {
    return 1;
  }
  sout("print something");
  return f(n/2);




  recurence relation, T(n) = T(n/2) + n, T(0) = 1
  Apply induction, 
  T(n) = T(n/2^k) + nk
   n = 02^k => k = logn, so the relation becomes
  T(n) = T(0) + nlogn
  
  So O(nlogn)
  

--------------------------------------------------------------------------------
O(n^2)

  if (n === 1) {
    return 1;
  }
  for(1 to n){
    sout(n);
  }
  return f(n-1);



  
  recurence relation, T(n) = T(n-1) + n, T(0) = 1
  Apply induction, 
  T(n) = T(n-2) + 2n
       = T(n-3) + 3n
       = T(n-k) + kn

   n=k, so the relation becomes
  T(n) = T(0) + n*n
  
  So O(n^2)

--------------------------------------------------------------------------------
O(2^n)

  if (n === 1) {
    return 1;
  }
  for(i to n){
    sout(n);
    return f(i);
  }

recurence relation, T(n) = T(n-1) + T(n-2) + T(n-3) + T(n-4) ... T(0)
Apply induction, 
Think of what is T(n-1) is, T(n-1) = T(n-2) + T(n-3) + T(n-4) ... T(0)
If we compare the first T(n) and the second T(n-1) equations,
T(n) = T(n-1) + secondRelation
     = T(n-1) + T(n-1)
     = 2T(n-1)

Now we can reduce this, which will yield 2^n
  
--------------------------------------------------------------------------------
O(2^n)

  if (n === 1) {
    return 1;
  }
  for(i to n){
    for(1 to i) -> print(something);
    return f(i);
  }

recurence relation, T(n) = T(n-1) + 1 + T(n-2) + 2 +  T(n-3) + 3 + T(n-4) + 4 ... T(0)
                         = T(n-1) + T(n-2) + T(n-3) + T(n-4) ... T(0) + 1 + 2 + 3 + 4 ... n

As pre the above solution, the first part is 2^n
Then the other part is n^2 (1+2+3+4...n)

T(n) = 2^n + n^2
T(n) ~= 2^n 


--------------------------------------------------------------------------------
O(2^n)

func(){
  for(int i =0; i < n; i++){
      solve(i);
  }
}

solve(n){
  if (n == 1) {
    return 1;
  }
  for(i to n){
    for(1 to i) -> print(something);
    return f(i);
  }
}

This might be tempting to say n*2^n. But not so.
We have to check what everytime the outer loop is executed.
The solve function is O(2^n). Based on the above problem.
So in the first iteration its, solve takes 2^0 = 1
So in the second iteration its, solve takes 2^1 = 2
So in the third iteration its, solve takes 2^2 = 4
so ... nth iteration is 2^n = 2^n

So totally, 1+2+4+...2^n
Or 2^0 + 2^1 + 2^2 + 2^3... 2^n = (2^n-1 - 1) / (2-1)
                                = 2^n-1 - 1
                                ~= 2^n

--------------------------------------------------------------------------------


int numChars = 26;
void printSortedStrings(int remaining) {
    printSortedStrings(remaining, "");
}
void printSortedStrings(int remaining, String prefix) { 
    if (remaining== 0) {
      if (isinOrder(prefix)) {
        System.out.println(prefix);
      }
    }else {
        for (int i= 0; i < numchars; i++) {
        char c = ithletter(i);
        printSortedStrings(remaining - 1, prefix + c); }
    }
}

boolean isinOrder(String s) {
  for (int i= 1; i < s.length(); i++) {
    int prev ithLetter(s.charAt(i - 1));
    int curr = ithLetter(s.charAt(i));
    if (prev > curr) {
    return false;
    } 
  }
  return true;
}
char ithLetter(int i) {
    return (char) (((int) 'a') + i); 
}

In the recursion loop, we have C characters.
And on every iteration we do k-1 (remaining).

So, T(k) = C * T(k-1), which will lead to C^k as time.

So at the end of recursion tree, we do O(K) to do isinOrder.

So total, T(k) = KC^k

--------------------------------------------------------------------------------
O(n^3)



--------------------------------------------------------------------------------
O(n*2^n)


--------------------------------------------------------------------------------
O(n^n)


--------------------------------------------------------------------------------
