Always try to have one recurrence relation before starting the induction. 
If you have two recurrence relation in your solution, then recude it to one by either
1. approx, for example T(n-2) can be approximted to T(n-1) since T(n-1) will always be greater than T(n-2)
2. Try t(n-2) and see if those are getting recuded by putting them in the first equation



WE need recusions sample for 

int f = (int n) => {
  if (n === 1) {
    return 1;
  }

  for (let i = 0; i < n; i++) {
    console.log(i);
  }

  return f(n-1) + f(n-1)
}

--------------------------------------------------------------------------------
O(n)


if (n === 1) {
  return 1;
}
sout("print something");
return f(n-1);

recurence relation, T(n) = T(n-1)+1, T(0) = 1

Apply induction, 
T(n) = T(n-k) + k
 n - k = 0
 n = k, so the relation becomes
T(n) = T(0) + n
     = 1 + n

So O(n)


--------------------------------------------------------------------------------
O(nlogn)


  if (n === 1) {
    return 1;
  }
  sout("print something");
  return f(n/2);




  recurence relation, T(n) = T(n/2) + n, T(0) = 1
  Apply induction, 
  T(n) = T(n/2^k) + nk
   n = 02^k => k = logn, so the relation becomes
  T(n) = T(0) + nlogn
  
  So O(nlogn)
  

--------------------------------------------------------------------------------
O(n^2)

  if (n === 1) {
    return 1;
  }
  for(1 to n){
    sout(n);
  }
  return f(n-1);



  
  recurence relation, T(n) = T(n-1) + n, T(0) = 1
  Apply induction, 
  T(n) = T(n-2) + 2n
       = T(n-3) + 3n
       = T(n-k) + kn

   n=k, so the relation becomes
  T(n) = T(0) + n*n
  
  So O(n^2)

--------------------------------------------------------------------------------
O(2^n)

  if (n === 1) {
    return 1;
  }
  for(i to n){
    sout(n);
    return f(i);
  }

recurence relation, T(n) = T(n-1) + T(n-2) + T(n-3) + T(n-4) ... T(0)
Apply induction, 
Think of what is T(n-1) is, T(n-1) = T(n-2) + T(n-3) + T(n-4) ... T(0)
If we compare the first T(n) and the second T(n-1) equations,
T(n) = T(n-1) + secondRelation
     = T(n-1) + T(n-1)
     = 2T(n-1)

Now we can reduce this, which will yield 2^n
  
--------------------------------------------------------------------------------
O(2^n)

  if (n === 1) {
    return 1;
  }
  for(i to n){
    for(1 to i) -> print(something);
    return f(i);
  }

recurence relation, T(n) = T(n-1) + 1 + T(n-2) + 2 +  T(n-3) + 3 + T(n-4) + 4 ... T(0)
                         = T(n-1) + T(n-2) + T(n-3) + T(n-4) ... T(0) + 1 + 2 + 3 + 4 ... n

As pre the above solution, the first part is 2^n
Then the other part is n^2 (1+2+3+4...n)

T(n) = 2^n + n^2
T(n) ~= 2^n 

--------------------------------------------------------------------------------
O(n^3)



--------------------------------------------------------------------------------
O(n*2^n)


--------------------------------------------------------------------------------
O(n^n)


--------------------------------------------------------------------------------
