trcky cases, 4 cases/tricks/approach to remeber

IN ALL CASES FIND THE NUMBER OF ITERATIONS

// inner loop relative to outer loops
---------------------------------------------------------------
for (int i = 1, i <= n; i++){
    for (int j = 1, i <= n; j=j+i){
        print("");
    }
}

to solve it, lets see how the inner loop behaves for every value of i,

when i = 1, j increments like j = j+1 => n iterations
when i = 2, j increments like j = j+2 => n/2 iterations
when i = 3, j increments like j = j+3 => n/3 iterations
....
when i = n, j increments like j = j+n => n/n = 1 iterations

so for every outer loop 1 till n, the SUM of ITERATIONS of INNER loop are

n + n/2 + n/3 .... n/n = n(1+ 1/2 + 1/3 + 1/4 ... 1/n) = n logn, since harmonic series produces log n approximatly

so time = O(n logn), or O(n * sqr(n)), since logn was an approimation, and next uuper bound is sqr(n)
---------------------------------------------------------------
// case where 3 variable decide the execution time

for (int i = 1, i <= n; i++){
    for (int j = 1, i <= k; j=j+1){ // where k < n
        print("");
    }
}

if we see carfully, the inner loop executes in the following fashion,
when i = 1, inner loop executes k times
when i = 2, inner loop executes k-1 times
when i = 3, inner loop executes k-2 times
...
when i = k, inner loop executes 1 time

so, we DIVIDE the outer loop into two. When (1 to k) + (k+1 t0 n)
when (1 to k), the inner loop executes 1+2+....k = k(k+1)/2 = O(k^2)
when (k+1 to n), the inner loop executes zero time. O(n-k) => O(n) since k<n as per problem statement
so total time = O(n + k^2)

---------------------------------------------------------------
// similare to the upper one except i = i + j
for (int i = 1, i <= n;){
    for (int j = 1, i <= k; j=j+1){ // where k < n
        print("");
    }
    i = i + j;
}

// This is very similare to the upper one except the i = i + k, when you see closly
so, 
i = i, inner loop executes k times
i = k, inner loop executes k times
i = 2k, inner loop executes k times
...
i = lk, inner loop executes k times, where lk = n => l = n/k

So the outer loop does, n/k iterations
And for every iternations, there is k inner iterations,

so time = (n/k) * k => O(n)
---------------------------------------------------------------
int i = 1;
int m = 1;

while( m < n){
    m = m + i; // statement 1
    i++;        // statement 2
}

Now for this, we do can like this,

statement 1 can has the following nature of execution like,

when i = 1; m = 2 (1+ 1)
     i = 2; m = 4 (1+1+2)
     i = 3; m = 7 (2+2+3)
     i = 4; m = 11 (2+2+3+4)
     i = 5; m = 16 (2+2+3+4+5)
     i = k; m = n (2+2+3+4+5....+k) => ( k(k+1)/2 ) + 1

so, when m = (k(k+1)/2) + 1 , the loop ends
so, sorting the k values as ( k(k+1)/2 ) + 1 = n => roughly K^2 = n

so then, loop stops at, k^2 = n
                     k = sqr(n) => there are sqr(n) iterations
                     so O(sqr(n))

---------------------------------------------------------------