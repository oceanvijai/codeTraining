https://www.youtube.com/watch?v=9SgLBjXqwd4&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=7

// Approach

Suppose we have a loop like this,

for(int i = start; i <= upperBound; i = i + Increment)
Pay attention to "Increment" factor and "upperBound" and how quick or slow we reach "upperBound" for every value of i
Also pay attention to start if its a inner loop


// addition series
for(int i = 1; i < n; i++) => k = n => O(n)
for(int i = 1; i < n; i = i+2) => k = n/2 => O(n)
for(int i = 1; i < n; i = i+3) => k = n/3 => O(n)

// power/fraction series
for(int i = 1; i < n; i = i * 2) => 2^k = n => O(log n base 2) => O(logn)
for(int i = 1; i < n; i = i * 3) => 3^k = n => O(log n base 3) => O(logn)
for(int i = n; i > 1; i = i / 2) =>  n/2^k = 1 => n = 2^k => log n = k =>  O(logn)

for(int i = 1; i * i < n; i++) => i * i = n => O(sqr(n))

for(int i = 1; i < n; i*2) {p++;} and for(int j = 1; j < p; j*2)
here p = log n and j = log p => O(loglogn)

for(int i = 1; i < n; i++) => i = n => O(n)
for(int i = 1; i < n; i++) => i = n => O(n)

---------------------------------------------------------------
// nested
---------------------------------------------------------------

for (int i = 1, i <= n; i = i * 2){ // i increase in power series, O(log n)
    for (int j = 1, i <= n; j=j+2){ // j increase linear, O(n/2) = O(n)
        print("");
    }
}

Ans: O(n logn)
---------------------------------------------------------------